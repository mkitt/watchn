#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var module = require('module');
var spawn = require("child_process").spawn;
var Watchn = require('../lib/watchn');
var npm = __dirname + '/../package.json';
var templates = __dirname + '/../templates/';
var args = process.argv.slice(2)
var silent = false;
var state = 'started..';
var file;
var watcher;
var child;


function notify(msg) {
  if (!silent) {
    console.log(msg);
  }
}

function abort(msg) {
  console.error(msg);
  process.exit(1);
}

function runner(name) {
  var tmpl = templates + 'runner.js';
  var out = path.normalize(process.cwd() + '/' + name);
  fs.writeFileSync(out, fs.readFileSync(tmpl, 'utf8'));
  return 'generated: ' + out;
}

function list() {
  var msg = 'Available Templates:';
  fs.readdirSync(templates).forEach(function (item) {
    if (item !== 'runner.js' && item !== 'help.txt')
      msg += '\n  ' + path.basename(item, '.js');
  });
  return msg;
}

function template(name) {
  var tmpl = templates + name + '.js';
  var msg = '';
  try {
    msg = fs.readFileSync(tmpl, 'utf8');
  } catch (err) {
    msg += 'Error:';
    msg += '\n  template "' + name + '" not found';
    msg += '\n  run "watchn --list-templates" for available templates';
  }
  return msg;
}

function start() {
  if (child) {
    child.kill();
    // this is pretty hacky, but forces the runner to be reloaded
    delete module._cache[file];
  }
  watcher = null;
  watcher = new Watchn(silent);
  notify('watchn has ' + state);
  child = spawn('node', [require(file).init(watcher)]);
}

function reload() {
  try {
    watcher.dispose();
    notify('..thanks for watchn');
  } catch (err) {}
  start();
}

while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-h':
      case '--help':
        abort(fs.readFileSync(templates + 'help.txt', 'utf8'));
    break;
    case '-v':
      case '--version':
        abort(JSON.parse(fs.readFileSync(npm, 'utf8')).version);
    break;
    case '-r':
      case '--runner':
        abort(runner(args.shift()));
    break;
    case '-t':
      case '--template':
        abort(template(args.shift()));
    break;
    case '-l':
      case '--list-templates':
        abort(list());
    break;
    case '-s':
      case '--silent':
        silent = true;
    break;
    default:
      file = path.join(process.cwd(), arg);
    break;
  }
}
if (!file) {
  var msg = 'Error:';
  msg += '\n  watchn requires a runner file';
  msg += '\n  run "watchn --help" for more information';
  abort(msg);
}

start();
state = 'reloaded..';

fs.watchFile(file, {persistent: true, interval: 50}, function (curr, prev) {
  if (curr.mtime > prev.mtime) {
    reload();
  }
});
